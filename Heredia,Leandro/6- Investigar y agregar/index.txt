 Investigar y agregar sentencias para ingresar valores por teclado en un par de ejercicios.
En ensamblador x86, ingresar valores por teclado depende del sistema: DOS (TASM/TLINK) o Linux (NASM). 
Le muestro un resumen para ambos casos y ejemplos.


#En DOS (TASM/TLINK)
#游댳 Leer un car치cter
MOV AH, 01h   ; funci칩n 01h de INT 21h = leer un car치cter
INT 21h       ; el car치cter ingresado queda en AL
#游댳 Leer una cadena
MOV AH, 0Ah   ; funci칩n 0Ah de INT 21h = leer cadena
LEA DX, buffer
INT 21h
#buffer debe estar definido as칤:
buffer db 10   ; tama침o m치ximo
       db ?    ; bytes le칤dos
       db 10 dup(0) ; espacio para los caracteres
#Ejemplo: leer un n칰mero de un solo d칤gito
MOV AH, 01h
INT 21h
SUB AL, '0'     ; convertir de ASCII a n칰mero
MOV BL, AL      ; guardarlo en BL

#En Linux (NASM)

#En Linux usamos syscall read para leer desde el teclado (stdin = 0).

#游댳 Leer caracteres

section .bss
    num resb 1   ; reservar 1 byte para el n칰mero ingresado

section .text
global _start

_start:
    mov eax, 0      ; syscall read
    mov ebx, 0      ; stdin
    lea ecx, [num]  ; direcci칩n donde guardar
    mov edx, 1      ; leer 1 byte
    int 0x80

    ; convertir ASCII a n칰mero
    mov al, [num]
    sub al, '0'
    ; ahora AL contiene el n칰mero ingresado

#游댳 Leer una l칤nea
section .bss
    buffer resb 10  ; espacio para 10 caracteres

mov eax, 0          ; syscall read
mov ebx, 0          ; stdin
lea ecx, [buffer]
mov edx, 10         ; hasta 10 bytes
int 0x80
#Esto guarda los bytes ingresados en buffer para procesarlos.